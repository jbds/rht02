// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Shuffle$ReactHooksTemplate = require("./Shuffle.bs.js");

function s2e(prim) {
  return prim;
}

var initialState_cardsNorth = [];

var initialState_cardsEast = [];

var initialState_cardsSouth = [];

var initialState_cardsWest = [];

var initialState = {
  cardsNorth: initialState_cardsNorth,
  cardsEast: initialState_cardsEast,
  cardsSouth: initialState_cardsSouth,
  cardsWest: initialState_cardsWest,
  northIsFlipped: true,
  eastIsFlipped: true,
  southIsFlipped: true,
  westIsFlipped: true,
  dealer: undefined,
  cardsDealedCount: 0
};

function dealCardByModulo(k, state) {
  if (state.cardsDealedCount % 4 === k) {
    var myArray = state.cardsNorth;
    var match = Caml_array.caml_array_get(myArray, state.cardsDealedCount / 4 | 0);
    Caml_array.caml_array_set(myArray, state.cardsDealedCount / 4 | 0, /* tuple */[
          match[0],
          /* tuple */[
            match[1][0],
            /* Hand */1
          ]
        ]);
    var sc = state.cardsDealedCount === 51 ? -1 : state.cardsDealedCount;
    console.log("cardsNorth sc=" + String(sc));
    return {
            cardsNorth: myArray,
            cardsEast: state.cardsEast,
            cardsSouth: state.cardsSouth,
            cardsWest: state.cardsWest,
            northIsFlipped: state.northIsFlipped,
            eastIsFlipped: state.eastIsFlipped,
            southIsFlipped: state.southIsFlipped,
            westIsFlipped: state.westIsFlipped,
            dealer: state.dealer,
            cardsDealedCount: sc + 1 | 0
          };
  }
  if (state.cardsDealedCount % 4 === (k + 1 | 0)) {
    var myArray$1 = state.cardsEast;
    var match$1 = Caml_array.caml_array_get(myArray$1, state.cardsDealedCount / 4 | 0);
    Caml_array.caml_array_set(myArray$1, state.cardsDealedCount / 4 | 0, /* tuple */[
          match$1[0],
          /* tuple */[
            match$1[1][0],
            /* Hand */1
          ]
        ]);
    var sc$1 = state.cardsDealedCount;
    return {
            cardsNorth: state.cardsNorth,
            cardsEast: myArray$1,
            cardsSouth: state.cardsSouth,
            cardsWest: state.cardsWest,
            northIsFlipped: state.northIsFlipped,
            eastIsFlipped: state.eastIsFlipped,
            southIsFlipped: state.southIsFlipped,
            westIsFlipped: state.westIsFlipped,
            dealer: state.dealer,
            cardsDealedCount: sc$1 + 1 | 0
          };
  }
  if (state.cardsDealedCount % 4 === (k + 2 | 0)) {
    var myArray$2 = state.cardsSouth;
    var match$2 = Caml_array.caml_array_get(myArray$2, state.cardsDealedCount / 4 | 0);
    Caml_array.caml_array_set(myArray$2, state.cardsDealedCount / 4 | 0, /* tuple */[
          match$2[0],
          /* tuple */[
            match$2[1][0],
            /* Hand */1
          ]
        ]);
    var sc$2 = state.cardsDealedCount;
    return {
            cardsNorth: state.cardsNorth,
            cardsEast: state.cardsEast,
            cardsSouth: myArray$2,
            cardsWest: state.cardsWest,
            northIsFlipped: state.northIsFlipped,
            eastIsFlipped: state.eastIsFlipped,
            southIsFlipped: state.southIsFlipped,
            westIsFlipped: state.westIsFlipped,
            dealer: state.dealer,
            cardsDealedCount: sc$2 + 1 | 0
          };
  }
  if (state.cardsDealedCount % 4 === (k + 3 | 0)) {
    var myArray$3 = state.cardsWest;
    var match$3 = Caml_array.caml_array_get(myArray$3, state.cardsDealedCount / 4 | 0);
    Caml_array.caml_array_set(myArray$3, state.cardsDealedCount / 4 | 0, /* tuple */[
          match$3[0],
          /* tuple */[
            match$3[1][0],
            /* Hand */1
          ]
        ]);
    var sc$3 = state.cardsDealedCount;
    return {
            cardsNorth: state.cardsNorth,
            cardsEast: state.cardsEast,
            cardsSouth: state.cardsSouth,
            cardsWest: myArray$3,
            northIsFlipped: state.northIsFlipped,
            eastIsFlipped: state.eastIsFlipped,
            southIsFlipped: state.southIsFlipped,
            westIsFlipped: state.westIsFlipped,
            dealer: state.dealer,
            cardsDealedCount: sc$3 + 1 | 0
          };
  }
  if (state.cardsDealedCount % 4 === (k + 4 | 0)) {
    var myArray$4 = state.cardsNorth;
    var match$4 = Caml_array.caml_array_get(myArray$4, state.cardsDealedCount / 4 | 0);
    Caml_array.caml_array_set(myArray$4, state.cardsDealedCount / 4 | 0, /* tuple */[
          match$4[0],
          /* tuple */[
            match$4[1][0],
            /* Hand */1
          ]
        ]);
    var sc$4 = state.cardsDealedCount;
    return {
            cardsNorth: myArray$4,
            cardsEast: state.cardsEast,
            cardsSouth: state.cardsSouth,
            cardsWest: state.cardsWest,
            northIsFlipped: state.northIsFlipped,
            eastIsFlipped: state.eastIsFlipped,
            southIsFlipped: state.southIsFlipped,
            westIsFlipped: state.westIsFlipped,
            dealer: state.dealer,
            cardsDealedCount: sc$4 + 1 | 0
          };
  }
  if (state.cardsDealedCount % 4 === (k + 5 | 0)) {
    var myArray$5 = state.cardsEast;
    var match$5 = Caml_array.caml_array_get(myArray$5, state.cardsDealedCount / 4 | 0);
    Caml_array.caml_array_set(myArray$5, state.cardsDealedCount / 4 | 0, /* tuple */[
          match$5[0],
          /* tuple */[
            match$5[1][0],
            /* Hand */1
          ]
        ]);
    var sc$5 = state.cardsDealedCount;
    return {
            cardsNorth: state.cardsNorth,
            cardsEast: myArray$5,
            cardsSouth: state.cardsSouth,
            cardsWest: state.cardsWest,
            northIsFlipped: state.northIsFlipped,
            eastIsFlipped: state.eastIsFlipped,
            southIsFlipped: state.southIsFlipped,
            westIsFlipped: state.westIsFlipped,
            dealer: state.dealer,
            cardsDealedCount: sc$5 + 1 | 0
          };
  }
  if (state.cardsDealedCount % 4 === (k + 6 | 0)) {
    var myArray$6 = state.cardsSouth;
    var match$6 = Caml_array.caml_array_get(myArray$6, state.cardsDealedCount / 4 | 0);
    Caml_array.caml_array_set(myArray$6, state.cardsDealedCount / 4 | 0, /* tuple */[
          match$6[0],
          /* tuple */[
            match$6[1][0],
            /* Hand */1
          ]
        ]);
    var sc$6 = state.cardsDealedCount;
    return {
            cardsNorth: state.cardsNorth,
            cardsEast: state.cardsEast,
            cardsSouth: myArray$6,
            cardsWest: state.cardsWest,
            northIsFlipped: state.northIsFlipped,
            eastIsFlipped: state.eastIsFlipped,
            southIsFlipped: state.southIsFlipped,
            westIsFlipped: state.westIsFlipped,
            dealer: state.dealer,
            cardsDealedCount: sc$6 + 1 | 0
          };
  }
  console.log("should be unreachable k=" + String(k));
  return state;
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* Action1 */0 :
          console.log("Action1 trace");
          return state;
      case /* Shuffle */1 :
          return Shuffle$ReactHooksTemplate.impureShuffleOfPack(undefined);
      case /* HideAllCards */2 :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: true,
                  eastIsFlipped: true,
                  southIsFlipped: true,
                  westIsFlipped: true,
                  dealer: state.dealer,
                  cardsDealedCount: state.cardsDealedCount
                };
      case /* ShowAllCards */3 :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: false,
                  eastIsFlipped: false,
                  southIsFlipped: false,
                  westIsFlipped: false,
                  dealer: state.dealer,
                  cardsDealedCount: state.cardsDealedCount
                };
      case /* Deal */4 :
          var match = state.dealer;
          if (match === undefined) {
            return state;
          }
          switch (match) {
            case /* North */0 :
                return dealCardByModulo(-1, state);
            case /* East */1 :
                return dealCardByModulo(-2, state);
            case /* South */2 :
                return dealCardByModulo(-3, state);
            case /* West */3 :
                return dealCardByModulo(0, state);
            
          }
      
    }
  } else if (action.tag) {
    switch (action[0]) {
      case "E" :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: state.northIsFlipped,
                  eastIsFlipped: state.eastIsFlipped,
                  southIsFlipped: state.southIsFlipped,
                  westIsFlipped: state.westIsFlipped,
                  dealer: /* East */1,
                  cardsDealedCount: state.cardsDealedCount
                };
      case "N" :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: state.northIsFlipped,
                  eastIsFlipped: state.eastIsFlipped,
                  southIsFlipped: state.southIsFlipped,
                  westIsFlipped: state.westIsFlipped,
                  dealer: /* North */0,
                  cardsDealedCount: state.cardsDealedCount
                };
      case "S" :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: state.northIsFlipped,
                  eastIsFlipped: state.eastIsFlipped,
                  southIsFlipped: state.southIsFlipped,
                  westIsFlipped: state.westIsFlipped,
                  dealer: /* South */2,
                  cardsDealedCount: state.cardsDealedCount
                };
      case "W" :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: state.northIsFlipped,
                  eastIsFlipped: state.eastIsFlipped,
                  southIsFlipped: state.southIsFlipped,
                  westIsFlipped: state.westIsFlipped,
                  dealer: /* West */3,
                  cardsDealedCount: state.cardsDealedCount
                };
      default:
        return {
                cardsNorth: state.cardsNorth,
                cardsEast: state.cardsEast,
                cardsSouth: state.cardsSouth,
                cardsWest: state.cardsWest,
                northIsFlipped: state.northIsFlipped,
                eastIsFlipped: state.eastIsFlipped,
                southIsFlipped: state.southIsFlipped,
                westIsFlipped: state.westIsFlipped,
                dealer: undefined,
                cardsDealedCount: state.cardsDealedCount
              };
    }
  } else {
    console.log("Flip from some location");
    switch (action[0]) {
      case /* North */0 :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: !state.northIsFlipped,
                  eastIsFlipped: state.eastIsFlipped,
                  southIsFlipped: state.southIsFlipped,
                  westIsFlipped: state.westIsFlipped,
                  dealer: state.dealer,
                  cardsDealedCount: state.cardsDealedCount
                };
      case /* East */1 :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: state.northIsFlipped,
                  eastIsFlipped: !state.eastIsFlipped,
                  southIsFlipped: state.southIsFlipped,
                  westIsFlipped: state.westIsFlipped,
                  dealer: state.dealer,
                  cardsDealedCount: state.cardsDealedCount
                };
      case /* South */2 :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: state.northIsFlipped,
                  eastIsFlipped: state.eastIsFlipped,
                  southIsFlipped: !state.southIsFlipped,
                  westIsFlipped: state.westIsFlipped,
                  dealer: state.dealer,
                  cardsDealedCount: state.cardsDealedCount
                };
      case /* West */3 :
          return {
                  cardsNorth: state.cardsNorth,
                  cardsEast: state.cardsEast,
                  cardsSouth: state.cardsSouth,
                  cardsWest: state.cardsWest,
                  northIsFlipped: state.northIsFlipped,
                  eastIsFlipped: state.eastIsFlipped,
                  southIsFlipped: state.southIsFlipped,
                  westIsFlipped: !state.westIsFlipped,
                  dealer: state.dealer,
                  cardsDealedCount: state.cardsDealedCount
                };
      
    }
  }
}

exports.s2e = s2e;
exports.initialState = initialState;
exports.dealCardByModulo = dealCardByModulo;
exports.reducer = reducer;
/* Shuffle-ReactHooksTemplate Not a pure module */
